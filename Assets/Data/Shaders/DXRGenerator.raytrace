#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
#include "Common.cginc"

#pragma max_recursion_depth 16

RWStructuredBuffer<float4> _DataBuffer;

float _CameraZFar;
float4x4 _InverseViewMatrix;
float4x4 _InverseProjectionMatrix;

[shader("raygeneration")]
void MyRaygenShader()
{
	uint3 dispatchId = DispatchRaysIndex();
	uint3 dispatchDim = DispatchRaysDimensions();
	float2 texcoord = (dispatchId.xy + float2(0.5, 0.5)) / float2(dispatchDim.x, dispatchDim.y);
	float3 viewPosition = float3(texcoord * 2.0 - float2(1.0, 1.0), 0.0);
	float4 clip = float4(viewPosition.xyz, 1.0);
	float4 viewPos = mul(_InverseProjectionMatrix, clip);
	viewPos.xyz /= viewPos.w;
	float3 worldPos = mul(_InverseViewMatrix, viewPos);
	float3 worldDirection = worldPos - _WorldSpaceCameraPos;

	RayDesc ray;
	ray.Origin = _WorldSpaceCameraPos; 
	ray.Direction = normalize(worldDirection) * _CameraZFar; //to shoot same rays in all directions
	ray.TMin = 0;
	ray.TMax = 10000;

	Payload payload;
	payload.result = 0.0h;
	payload.depth = 0;
	payload.distance = 0.0;
	payload.volume = 1;

	TraceRay(_RaytracingAccelerationStructure, 0, 0xFFFFFFF, 0, 1, 0, ray, payload);

	_DataBuffer[dispatchDim.x * dispatchId.y + dispatchId.x] = float4(payload.result, payload.depth, payload.distance, payload.volume);
}

[shader("miss")]
void MyMissShader(inout Payload payload : SV_RayPayload)
{
	payload.result = 0.0h;
}