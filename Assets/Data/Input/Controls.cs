//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Data/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PCPlayer"",
            ""id"": ""b3013d97-61e1-43f4-9bf8-32b4b237ddd1"",
            ""actions"": [
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""5f3c09a3-c38b-4e49-802b-903327ed1edb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e08d3570-e74a-40b8-8f6a-2e2effe8a45f"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EscapeMenu"",
                    ""type"": ""Button"",
                    ""id"": ""1539349d-fe32-4918-bce4-83878ea06234"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mute"",
                    ""type"": ""Button"",
                    ""id"": ""e08fceaf-171a-4833-a4c3-c34d72b2a8c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c46669a-208f-44d9-b41e-8abe41382b2e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ed5e7ee4-c0be-41a1-8815-d2e9efce4dc0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4fdde994-e9dd-41d8-8efd-d816cc169d58"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8f699a0c-784e-45d9-ba6c-b4a410e30002"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bb2db709-85f7-48fe-85f9-895a95db6e46"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a7d35abd-a578-42b3-9098-98986f9d916b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ba4b4cc0-7bb9-4823-934d-6fbf3f6e5aed"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EscapeMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca85e908-afb6-4cb5-87ab-8eefc3531ec6"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftController"",
            ""id"": ""a01a6bde-c529-4882-aaa9-bd54180f8d7f"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""e8b89aa0-b45e-4048-9c2e-36e4c01831fc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""dbe8db0c-85cd-4221-b167-45d656fd16bd"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""e3f72ff0-da28-4c86-b974-e6506af2cfd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Axis"",
                    ""type"": ""Value"",
                    ""id"": ""1e092ef2-471f-4fe5-aa5f-e025d42af046"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""70032a4f-af7c-4d66-a28f-def9fd72cb79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ddbd87be-c2f9-472d-bcfd-00a481bf507f"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13da9fc5-72d4-408d-b00d-79bf5c1ead62"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""191b7cf4-e0fe-4398-902a-98b6f87d88b6"",
                    ""path"": ""<XRController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38260692-ebc4-44f6-83d7-8f4c45dc8aa4"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c27b052d-effe-4054-a114-339376db4ceb"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightController"",
            ""id"": ""87a8bea3-8801-405a-a3c4-ff2d383424cc"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""d8c97fd9-bc56-4f52-8cb0-118a38a43154"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""e05110a6-6626-4a61-b98a-5a2c7e455265"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""e83cfab2-889b-4b18-b8d0-748c85f69bbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""18cdbd73-aacf-4ffe-8cbe-88756ed705bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""3be1ee66-5050-481d-b74a-20bc949e8407"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9e27841-4bd2-42f5-adbe-f3c9a6cfc8cd"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a65f0d9b-af81-4d2e-ae21-5cefd1b7866e"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f87e08d-b492-48d3-89e3-77094ea009be"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d77e280-3d06-4d09-94ab-63c725421f67"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8f08dd8-8f64-4054-b890-3968ff652265"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PCPlayer
        m_PCPlayer = asset.FindActionMap("PCPlayer", throwIfNotFound: true);
        m_PCPlayer_Camera = m_PCPlayer.FindAction("Camera", throwIfNotFound: true);
        m_PCPlayer_Movement = m_PCPlayer.FindAction("Movement", throwIfNotFound: true);
        m_PCPlayer_EscapeMenu = m_PCPlayer.FindAction("EscapeMenu", throwIfNotFound: true);
        m_PCPlayer_Mute = m_PCPlayer.FindAction("Mute", throwIfNotFound: true);
        // LeftController
        m_LeftController = asset.FindActionMap("LeftController", throwIfNotFound: true);
        m_LeftController_Position = m_LeftController.FindAction("Position", throwIfNotFound: true);
        m_LeftController_Rotation = m_LeftController.FindAction("Rotation", throwIfNotFound: true);
        m_LeftController_Trigger = m_LeftController.FindAction("Trigger", throwIfNotFound: true);
        m_LeftController_Axis = m_LeftController.FindAction("Axis", throwIfNotFound: true);
        m_LeftController_Primary = m_LeftController.FindAction("Primary", throwIfNotFound: true);
        // RightController
        m_RightController = asset.FindActionMap("RightController", throwIfNotFound: true);
        m_RightController_Position = m_RightController.FindAction("Position", throwIfNotFound: true);
        m_RightController_Rotation = m_RightController.FindAction("Rotation", throwIfNotFound: true);
        m_RightController_Trigger = m_RightController.FindAction("Trigger", throwIfNotFound: true);
        m_RightController_Primary = m_RightController.FindAction("Primary", throwIfNotFound: true);
        m_RightController_Secondary = m_RightController.FindAction("Secondary", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PCPlayer
    private readonly InputActionMap m_PCPlayer;
    private IPCPlayerActions m_PCPlayerActionsCallbackInterface;
    private readonly InputAction m_PCPlayer_Camera;
    private readonly InputAction m_PCPlayer_Movement;
    private readonly InputAction m_PCPlayer_EscapeMenu;
    private readonly InputAction m_PCPlayer_Mute;
    public struct PCPlayerActions
    {
        private @Controls m_Wrapper;
        public PCPlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Camera => m_Wrapper.m_PCPlayer_Camera;
        public InputAction @Movement => m_Wrapper.m_PCPlayer_Movement;
        public InputAction @EscapeMenu => m_Wrapper.m_PCPlayer_EscapeMenu;
        public InputAction @Mute => m_Wrapper.m_PCPlayer_Mute;
        public InputActionMap Get() { return m_Wrapper.m_PCPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPCPlayerActions instance)
        {
            if (m_Wrapper.m_PCPlayerActionsCallbackInterface != null)
            {
                @Camera.started -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnCamera;
                @Movement.started -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnMovement;
                @EscapeMenu.started -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnEscapeMenu;
                @EscapeMenu.performed -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnEscapeMenu;
                @EscapeMenu.canceled -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnEscapeMenu;
                @Mute.started -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnMute;
                @Mute.performed -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnMute;
                @Mute.canceled -= m_Wrapper.m_PCPlayerActionsCallbackInterface.OnMute;
            }
            m_Wrapper.m_PCPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @EscapeMenu.started += instance.OnEscapeMenu;
                @EscapeMenu.performed += instance.OnEscapeMenu;
                @EscapeMenu.canceled += instance.OnEscapeMenu;
                @Mute.started += instance.OnMute;
                @Mute.performed += instance.OnMute;
                @Mute.canceled += instance.OnMute;
            }
        }
    }
    public PCPlayerActions @PCPlayer => new PCPlayerActions(this);

    // LeftController
    private readonly InputActionMap m_LeftController;
    private ILeftControllerActions m_LeftControllerActionsCallbackInterface;
    private readonly InputAction m_LeftController_Position;
    private readonly InputAction m_LeftController_Rotation;
    private readonly InputAction m_LeftController_Trigger;
    private readonly InputAction m_LeftController_Axis;
    private readonly InputAction m_LeftController_Primary;
    public struct LeftControllerActions
    {
        private @Controls m_Wrapper;
        public LeftControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_LeftController_Position;
        public InputAction @Rotation => m_Wrapper.m_LeftController_Rotation;
        public InputAction @Trigger => m_Wrapper.m_LeftController_Trigger;
        public InputAction @Axis => m_Wrapper.m_LeftController_Axis;
        public InputAction @Primary => m_Wrapper.m_LeftController_Primary;
        public InputActionMap Get() { return m_Wrapper.m_LeftController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftControllerActions set) { return set.Get(); }
        public void SetCallbacks(ILeftControllerActions instance)
        {
            if (m_Wrapper.m_LeftControllerActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnRotation;
                @Trigger.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnTrigger;
                @Axis.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnAxis;
                @Axis.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnAxis;
                @Axis.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnAxis;
                @Primary.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPrimary;
                @Primary.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPrimary;
                @Primary.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPrimary;
            }
            m_Wrapper.m_LeftControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
                @Axis.started += instance.OnAxis;
                @Axis.performed += instance.OnAxis;
                @Axis.canceled += instance.OnAxis;
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
            }
        }
    }
    public LeftControllerActions @LeftController => new LeftControllerActions(this);

    // RightController
    private readonly InputActionMap m_RightController;
    private IRightControllerActions m_RightControllerActionsCallbackInterface;
    private readonly InputAction m_RightController_Position;
    private readonly InputAction m_RightController_Rotation;
    private readonly InputAction m_RightController_Trigger;
    private readonly InputAction m_RightController_Primary;
    private readonly InputAction m_RightController_Secondary;
    public struct RightControllerActions
    {
        private @Controls m_Wrapper;
        public RightControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_RightController_Position;
        public InputAction @Rotation => m_Wrapper.m_RightController_Rotation;
        public InputAction @Trigger => m_Wrapper.m_RightController_Trigger;
        public InputAction @Primary => m_Wrapper.m_RightController_Primary;
        public InputAction @Secondary => m_Wrapper.m_RightController_Secondary;
        public InputActionMap Get() { return m_Wrapper.m_RightController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightControllerActions set) { return set.Get(); }
        public void SetCallbacks(IRightControllerActions instance)
        {
            if (m_Wrapper.m_RightControllerActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnRotation;
                @Trigger.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnTrigger;
                @Primary.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPrimary;
                @Primary.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPrimary;
                @Primary.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPrimary;
                @Secondary.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnSecondary;
                @Secondary.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnSecondary;
                @Secondary.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnSecondary;
            }
            m_Wrapper.m_RightControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Secondary.started += instance.OnSecondary;
                @Secondary.performed += instance.OnSecondary;
                @Secondary.canceled += instance.OnSecondary;
            }
        }
    }
    public RightControllerActions @RightController => new RightControllerActions(this);
    public interface IPCPlayerActions
    {
        void OnCamera(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnEscapeMenu(InputAction.CallbackContext context);
        void OnMute(InputAction.CallbackContext context);
    }
    public interface ILeftControllerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnAxis(InputAction.CallbackContext context);
        void OnPrimary(InputAction.CallbackContext context);
    }
    public interface IRightControllerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnPrimary(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
    }
}
